# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

class Component:
    """This class allows to perform operations on the components list of the
    project."""
    
    def __init__(self, MWS):
        """Initializes a new instance of Component.

        Parameters
        ----------
        MWS : COM object
            COM object referencing the project to control.
        """
        
        self.__MWS = MWS
        
        return
    
    def new(self, name: str):
        """Create a new component in the current project.
        
        A subcomponent can be specified by using a slash (/) (e.g. name =
        "component/subcomponent").

        Parameters
        ----------
        name : str
            Name of the component to create.

        Raises
        ------
        TypeError
            If name is not of type str.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Generate the VBA code for creating the new component
        vba = 'Component.New "{}"'.format(name)

        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("new component: " + name, vba)

        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for creating a new component" +
                " called {} was not successful. Check that the ".format(name) + 
                "name does not contain special characters.")
        
        return
    
    def delete(self, name: str):
        """Delete a component of the current project.
        
        A subcomponent can be specified by using a slash (/) (e.g. name =
        "component/subcomponent").

        Parameters
        ----------
        name : str
            Name of the component to delete.

        Raises
        ------
        TypeError
            If name is not of type str.
        ValueError
            If name does not match any component in the project.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check if the component exists. If it does not, raise an exception.
        doesExist = self.exist(name)
        if not doesExist:
            raise ValueError(
                "ERROR: there is no component called {} in the ".format(name) + 
                "project, so it cannot be deleted.")
        
        # Generate the VBA code for deleting the component
        vba = 'Component.Delete "{}"'.format(name)

        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("delete component: " + name, vba)

        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for deleting the component " +
                "called {} was not successful.".format(name))
        
        return
    
    def rename(self, name: str, newName: str):
        """Rename a component of the current project.
        
        A subcomponent can be specified by using a slash (/) (e.g. name =
        "component/subcomponent"). By doing so, it is possible to move
        subcomponents from one component to another (or even to make them a
        component of their own).

        Parameters
        ----------
        name : str
            Current name of the component to rename.
        newName : str
            New name to give to the component.

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If newName is not of type str.
        ValueError
            If name does not match any component in the project.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check that newName is of type str
        if not isinstance(newName, str):
            raise TypeError("ERROR: newName must be of type str.")
        
        # Check if the component exists. If it does not, raise an exception.
        doesExist = self.exist(name)
        if not doesExist:
            raise ValueError(
                "ERROR: there is no component called {} in the ".format(name) + 
                "project, so it cannot be renamed.")
        
        # Generate the VBA code for renaming the component    
        vba = 'Component.Rename "{}", "{}"'.format(name, newName)

        # Send the VBA code to CST
        command = "rename component: {} to: {}".format(name, newName)
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory(command, vba)

        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for renaming the component" +
                " called {} to {} was not successful. ".format(name, newName) + 
                "Check that newName does not contain special characters.")
        
        return
        
    def exist(self, name: str):
        """Check if a component does exist in the current project.
        
        A subcomponent can be specified by using a slash (/) (e.g. name =
        "component/subcomponent").

        Parameters
        ----------
        name : str
            Name of the component to check.

        Returns
        -------
        bool
            True if the component exists, False otherwise.

        Raises
        ------
        TypeError
            If name is not of type str.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check if the component does exist in the project
        result = self.__MWS.Component.DoesExist(name)
        
        return result
    
    def ensureExistence(self, name: str):
        """Check if a component called name does exist in the project. If it
        does not, create it.

        Parameters
        ----------
        name : str
            Name of the component to check.

        Raises
        ------
        TypeError
            If name is not of type str.
        RuntimeError
            If calling self.new() raises a RuntimeError.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check if the component exists
        doesExist = self.exist(name)
        
        # If it does not, create it
        if not doesExist:
            try:
                self.new(name)
            except RuntimeError:
                raise RuntimeError(
                    "ERROR: calling self.new() raised a RuntimeError. Check" +
                    " that name does not contain special characters.")
        
        return
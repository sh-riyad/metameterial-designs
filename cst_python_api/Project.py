# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

from .Parameter import Parameter

class Project:
    
    def __init__(self, MWS):
        """Initializes a new instance of Project.

        Parameters
        ----------
        MWS : COM object
            COM object referencing the project to control.
        """
        
        self.__MWS = MWS
        self.Parameter = Parameter(self.__MWS)
        
        return
    
    def setUnits(
        self, leng: str = "mm", freq: str = "GHz", time: str = "s",
        temp: str = "K"):
        """Sets the units for the current project.
        
        CST Microwave Studio only allows to change the units for the following
        magnitudes: length, frequency, time and temperature. For other
        magnitudes like voltage, current or capacitance it is not possible to
        modify the units from their default value.
        
        Possible values for each of the modifiable units are as follows:
        - Length: "m", "cm", "mm", "um", "nm", "ft", "mil", "in"
        - Frequency: "Hz", "kHz", "MHz", "GHz", "THz", "pHz"
        - Time: "s", "ms", "us", "ns", "ps", "fs"
        - Temperature: "K", "degC", "degF" (Kelvin, Celsius, Fahrenheit)

        Parameters
        ----------
        leng : str, optional
            Units for lenght, by default "mm"
        freq : str, optional
            Units for frequency, by default "GHz"
        time : str, optional
            Units for time, by default "s"
        temp : str, optional
            Units for temperature, by default "K"

        Raises
        ------
        TypeError
            If leng is not of type str.
        ValueError
            If leng does not take a valid value.
        TypeError
            If freq is not of type str.
        ValueError
            If freq does not take a valid value.
        TypeError
            If time is not of type str.
        ValueError
            If time does not take a valid value.
        TypeError
            If temp is not of type str.
        ValueError
            If temp does not take a valid value.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that leng is of type str
        if not isinstance(leng, str):
            raise TypeError("ERROR: leng must be of type str.")
        
        # Check that leng presents a valid value
        validLengValues = {"m", "cm", "mm", "um", "nm", "ft", "mil", "in"}
        if not leng in validLengValues:
            raise ValueError("ERROR: {} is not a valid value for geom.".format(leng))
        
        # Check that freq is of type str
        if not isinstance(freq, str):
            raise TypeError("ERROR: freq must be of type str.")
        
        # Check that freq presents a valid value
        validFreqValues = {"Hz", "kHz", "MHz", "GHz", "THz", "PHz"}
        if not freq in validFreqValues:
            raise ValueError("ERROR: {} is not a valid value for freq.".format(freq))
        
        # Check that time is of type str
        if not isinstance(time, str):
            raise TypeError("ERROR: time must be of type str.")
        
        # Check that time presents a valid value
        validTimeValues = {"s", "ms", "us", "ns", "ps", "fs"}
        if not time in validTimeValues:
            raise ValueError("ERROR: {} is not a valid value for time.".format(time))
        
        # Check that temp is of type str
        if not isinstance(temp, str):
            raise TypeError("ERROR: temp must be of type str.")
        
        # Check that temp presents a valid value
        validTempValues = {"K", "degC", "degF"}
        if not temp in validTempValues:
            raise ValueError("ERROR: {} is not a valid value for temp.".format(temp))
        
        # Generate the VBA code for changing the units of the project
        vba = (
            'With Units\n' +
            '.SetUnit "Length", "{}"\n'.format(leng) +
            '.SetUnit "Temperature", "{}"\n'.format(temp) +
            '.SetUnit "Voltage", "V"\n' +
            '.SetUnit "Current", "A"\n' +
            '.SetUnit "Resistance", "Ohm"\n' +
            '.SetUnit "Conductance", "S"\n' +
            '.SetUnit "Capacitance", "pF"\n' +
            '.SetUnit "Inductance", "nH"\n' +
            '.SetUnit "Frequency", "{}"\n'.format(freq) +
            '.SetUnit "Time", "{}"\n'.format(time) +
            '.SetResultUnit "frequency", "frequency", ""\n' +
            'End With'
            )

        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define units", vba)

        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for setting the units of " +
                "the project was not successful.")
        
        
        return
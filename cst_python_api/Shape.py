# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

from typing import Union, List
import numpy as np
from .CheckParam import CheckParam
class Shape:
    """This class allows to add 3D bodies to the project
    """
    
    def __init__(self, MWS):
        """Initializes a new instance of Shape.

        Parameters
        ----------
        MWS : COM object
            COM object referencing the project to control.
        """
        
        self.__MWS = MWS
        self.__CheckParam = CheckParam(MWS)
        return
    
    def addBrick(
        self, xMin: Union[float, str], xMax: Union[float, str],
        yMin: Union[float, str], yMax: Union[float, str],
        zMin: Union[float, str], zMax: Union[float, str],name: str, component: str, material: str):
        """Add a brick to the 3D model.
        
        x, y and z are lists of two elements indicating the ends (minimum and
        maximum) of the brick at each of these coordinates. These lists can
        contain either a float value, or a string referencing a parameter
        already existing in the project.

        Parameters
        ----------
        xMin : float or str
            xMin limit of the brick.
        xMax : float or str
            xMax limit of the brick.
        yMin : float or str
            yMin limit of the brick.
        yMax : float or str
            yMax limit of the brick.
        zMin : float or str
            zMin limit of the brick.
        zMax : float or str
            zMax limit of the brick.
        name : str
            Name to give to the brick.
        component : str
            Component where the brick must be created.
        material : str
            Material to use for the brick.

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If component is not of type str.
        TypeError
            If material is not of type str.
        TypeError
            If any of the geometric parameters (xMin, xMax, yMin, yMax, zMin,
            zMax) describing the brick is not of type float or str.
        RuntimeError
            If any of the geometric parameters describing the brick is of type
            str but it does not match any parameter already defined in the
            project.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check that component is of type str
        if not isinstance(component, str):
            raise TypeError("ERROR: component must be of type str.")
        
        # Check that material is of type str
        if not isinstance(material, str):
            raise TypeError("ERROR: material must be of type str.")
        
        ########################################################################
        # Pass all the parameters describing the geometric characteristics of
        # the brick through the Parameter Checker to asses that they are of the
        # correct type and to cast them to str.
        ########################################################################
        
        # Group the values in a dictionary to simplify checking several
        # parameters
        geomParams = {"xMin": xMin, "xMax": xMax, "yMin": yMin, "yMax": yMax,
                      "zMin": zMin, "zMax": zMax}
        
        # For each parameter
        for key, value in geomParams.items():
            # Pass is through the checker
            try:
                geomParams[key] = self.__CheckParam.doCheck(value)
            # If an exception occurs, handle it    
            except TypeError:
                raise TypeError(f"ERROR: {key} must be of type float or str.")
            except RuntimeError:
                raise RuntimeError(f"ERROR: {key} must make reference to a" + 
                                   "parameter already defined in the project")
                
        vba = (
            'With Brick\n' +
	        '.Reset\n' +
	        '.Name "{}"\n'.format(name) +
	        '.Component "{}"\n'.format(component) +
	        '.Material "{}"\n'.format(material) +
	        '.XRange "{}", "{}"\n'.format(geomParams["xMin"], geomParams["xMax"]) +
	        '.YRange "{}", "{}"\n'.format(geomParams["yMin"], geomParams["yMax"]) +
	        '.ZRange "{}", "{}"\n'.format(geomParams["zMin"], geomParams["zMax"]) +
	        '.Create\n' +
	        'End With'
            )
        
        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define brick: " + name, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for creating the new brick " +
                "was not successful. Check that the chosen material is defined" +
                " and that the specified name is not currently in use inside " +
                "the component where the brick must be created.")

        
        return
    
    def addCylinder(
        self, xMin: Union[float, str], yMin: Union[float, str],
        zMin: Union[float, str], extRad: Union[float, str],
        intRad: Union[float, str], name: str, component: str, material: str,
        orientation: str, xMax: Union[float, str]=0.0, yMax: Union[float, str]=0.0,
        zMax: Union[float, str]=0.0, nSegments: int=0):
        """Add a cylinder to the 3D model.
        
        The cylinder can have three different orientations: Along X, along Y and
        along Z. This is denoted by the parameter orientation.
        
        The xMin/xMax, yMin/yMax and zMin/zMax parameters are interpreted in a
        different way depending on the value of orientation. For
        orientation='x', xMin and and xMax will serve to determine the position
        of the bottom and top faces along the X axis, while yMin and zMin will
        define the center of the bottom face on the YZ plane and yMax and zMax
        will be ignored. For the other two orientations the code proceeds
        analogously.
        
        nSegments can be used to control the number of sides of the polygon
        generating the cylinder. The possible smallest value is 3. However, a
        value of 0 can be used to denote a polygon with infinite sides (i.e. a
        circle).

        Parameters
        ----------
        xMin : float or str
            Used to define the position of the bottom face.
        yMin : float or str
            Used to define the position of the top face, only when
            orientation='x'.
        zMin : float or str
            Used to define the position of the bottom face.
        extRad : float or str
            External radius of the cylinder.
        intRad : float or str
            Internal radius of the cylinder.
        name : str
            Name to give to the cylinder.
        component : str
            Component where the cylinder must be created.
        material : str
            Material to use for the cylinder.
        orientation : str
            Orientation of the cylinder. Only possible values are 'x', 'y' and
            'z'.
        xMax : float or str, optional
            Used to define the position of the top face, only when
            orientation='x', by default 0.0
        yMax : float or str, optional
            Used to define the position of the top face, only when
            orientation='y', by default 0.0
        zMax : float or str, optional
            Used to define the position of the top face, only when
            orientation='z', by default 0.0
        nSegments : int, optional
            Number of sides of the polygon that generates the cylinder, by
            default 0

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If component is not of type str.
        TypeError
            If material is not of type str.
        ValueError
            If orientation is different of 'x', 'y' and 'z'.
        ValueError
            If nSegments is of type int and takes a value smaller than 3 and
            different of 0.
        TypeError
            If nSegments is not of type int.
        TypeError
            If any of the geometric parameters (xMin, xMax, yMin, yMax, zMin,
            zMax, extRad, intRad) describing the cylinder is not of type float
            or str.
        RuntimeError
            If any of the geometric parameters describing the cylinder is of
            type str but it does not match any parameter already defined in the
            project.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check that component is of type str
        if not isinstance(component, str):
            raise TypeError("ERROR: component must be of type str.")
        
        # Check that material is of type str
        if not isinstance(material, str):
            raise TypeError("ERROR: material must be of type str.")
        
        # Check that orientation is either "x", "y" or "z"
        validOrientations = {"x", "y", "z"}
        if orientation not in validOrientations:
            raise ValueError("ERROR: orientation must be 'x', 'y' ot 'z'.")
        
        # Check that nSegments is of type int
        if isinstance(nSegments, int):
            # If nSegments is smaller than 3 and different of zero, raise an exception.
            if nSegments < 3 and nSegments != 0:
                raise ValueError("ERROR: nSegments must be greater or equal than zero.")
        else:
            raise TypeError("ERROR: nSegments mut be of type int.")
        
        ########################################################################
        # Pass all the parameters describing the geometric characteristics of
        # the cylinder through the Parameter Checker to asses that they are of the
        # correct type and to cast them to str.
        ########################################################################
        
        # Group the values in a dictionary to simplify checking several
        # parameters
        geomParams = {"xMin": xMin, "xMax": xMax, "yMin": yMin, "yMax": yMax,
                      "zMin": zMin, "zMax": zMax, "extRad": extRad,
                      "intRad":intRad}
        
        # For each parameter
        for key, value in geomParams.items():
            # Pass is through the checker
            try:
                geomParams[key] = self.__CheckParam.doCheck(value)
            # If an exception occurs, handle it    
            except TypeError:
                raise TypeError(f"ERROR: {key} must be of type float or str.")
            except RuntimeError:
                raise RuntimeError(f"ERROR: {key} must make reference to a" + 
                                   "parameter already defined in the project")
                
        # Generate the VBA code common for any cylinder regardless of its
        # orientation        
        vba = (
            'With Cylinder\n' +
            '.Reset\n' +
            '.Name "{}"\n'.format(name) +
            '.Component "{}"\n'.format(component) +
            '.Material "{}"\n'.format(material) +
            '.OuterRadius "{}"\n'.format(geomParams["extRad"]) +
            '.InnerRadius "{}"\n'.format(geomParams["intRad"]) +
            '.Axis "{}"\n'.format(orientation)
            )
    
        # Generate the part of the vba code which depends on the orientation of
        # the cylinder
        if orientation == "x":
            vbaAux = (
                '.Xrange "{}", "{}"\n'.format(geomParams["xMin"], geomParams["xMax"]) +
                '.Ycenter "{}"\n'.format(geomParams["yMin"]) +
                '.Zcenter "{}"\n'.format(geomParams["zMin"]) +
                '.Segments "{:d}"\n'.format(nSegments) +
                '.Create\n' +
                'End With'
                )
    
        elif orientation == "y":
            vbaAux = (
                '.Yrange "{}", "{}"\n'.format(geomParams["yMin"], geomParams["yMax"]) +
                '.Xcenter "{}"\n'.format(geomParams["xMin"]) +
                '.Zcenter "{}"\n'.format(geomParams["zMin"]) +
                '.Segments "{:d}"\n'.format(nSegments) +
                '.Create\n' +
                'End With'
                )

        elif orientation == "z":
            vbaAux = (
                '.Zrange "{}", "{}"\n'.format(geomParams["zMin"], geomParams["zMax"]) +
                '.Xcenter "{}"\n'.format(geomParams["xMin"]) +
                '.Ycenter "{}"\n'.format(geomParams["yMin"]) +
                '.Segments "{:d}"\n'.format(nSegments) +
                '.Create\n' +
                'End With'
                )

        # Join both pieces of VBA code
        vba = vba + vbaAux

        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define cylinder: " + name, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for creating the new cylinder " +
                "was not successful. Check that the chosen material is defined" +
                " and that the specified name is not currently in use inside " +
                "the component where the cylinder must be created.")
        
        return
    
    def addSphere(
        self, xCen: Union[float, str], yCen: Union[float, str],
        zCen: Union[float, str], cenRad: Union[float, str], name: str,
        component: str, material: str, topRad: Union[float, str]=0.0,
        botRad: Union[float, str]=0.0, orientation: str="z", nSegments: int=0):
        """Add a sphere to the 3D model.
        
        The sphere can have three different orientations: Along X, along Y and
        along Z. This is denoted by the parameter orientation. The orientation
        of the sphere is only relevant if a truncation of its ends is performed
        via the parameters topRad/botRad, or if a value other than 0 is passed
        to nSegments.
        
        nSegments can be used to control the number of sides of the polygon
        generating the sphere. This polygon in defined on the plane
        perpendicular to the direction defined by orientation. The possible
        smallest value is 3. However, a value of 0 can be used to denote a
        polygon with infinite sides (i.e. a circle).

        Parameters
        ----------
        xCen : float or str
            X coordinate of the sphere center
        yCen : float or str
            Y coordinate of the sphere center
        zCen : float or str
            Z coordinate of the sphere center
        cenRad : float or str
            Radius of the sphere.
        name : str
            Name to give to the sphere.
        component : str
            Component where the sphere must be created.
        material : str
            Material to use for the sphere.
        topRad : float or str, optional
            Radius for the truncation of the sphere on its top end (defined by
            the orientation parameter), by default 0.0
        botRad : float or str, optional
            Radius for the truncation of the sphere on its bottom end (defined
            by the orientation parameter), by default 0.0
        orientation : str, optional
            Axis on which the truncations defined topRad and botRad will be
            applied, by default "z"
        nSegments : int, optional
            Number of sides of the polygon that generates the sphere, by default
            0

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If component is not of type str.
        TypeError
            If material is not of type str.
        ValueError
            If orientation is different of 'x', 'y' and 'z'.
        ValueError
            If nSegments is of type int and takes a value smaller than 3 and
            different of 0.
        TypeError
            If nSegments is not of type int.
        TypeError
            If any of the geometric parameters (xCen, yCen, zCen, cenRad,
            topRad, botRad) describing the sphere is not of type float or str.
        RuntimeError
            If any of the geometric parameters describing the sphere is of type
            str but it does not match any parameter already defined in the
            project.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check that component is of type str
        if not isinstance(component, str):
            raise TypeError("ERROR: component must be of type str.")
        
        # Check that material is of type str
        if not isinstance(material, str):
            raise TypeError("ERROR: material must be of type str.")
        
        # Check that orientation is either "x", "y" or "z"
        validOrientations = {"x", "y", "z"}
        if orientation not in validOrientations:
            raise ValueError("ERROR: orientation must be 'x', 'y' ot 'z'.")
        
        # Check that nSegments is of type int
        if isinstance(nSegments, int):
            # If nSegments is smaller than 3 and different of zero, raise an exception.
            if nSegments < 3 and nSegments != 0:
                raise ValueError("ERROR: nSegments must be greater or equal than zero.")
        else:
            raise TypeError("ERROR: nSegments mut be of type int.")
        
        ########################################################################
        # Pass all the parameters describing the geometric characteristics of
        # the sphere through the Parameter Checker to asses that they are of the
        # correct type and to cast them to str.
        ########################################################################
        
        # Group the values in a dictionary to simplify checking several
        # parameters
        geomParams = {"xCen": xCen, "yCen": yCen, "zCen": zCen,
                      "cenRad": cenRad, "topRad": topRad, "botRad": botRad}
        
        # For each parameter
        for key, value in geomParams.items():
            # Pass is through the checker
            try:
                geomParams[key] = self.__CheckParam.doCheck(value)
            # If an exception occurs, handle it    
            except TypeError:
                raise TypeError(f"ERROR: {key} must be of type float or str.")
            except RuntimeError:
                raise RuntimeError(f"ERROR: {key} must make reference to a" + 
                                   "parameter already defined in the project")
                
        # Generate the VBA code 
        vba = (
            'With Sphere\n' +
            '.Reset \n' +
            '.Name "{}"\n'.format(name) +
            '.Component "{}"\n'.format(component) +
            '.Material "{}"\n'.format(material) +
            '.Axis "{}"\n'.format(orientation) +
            '.CenterRadius "{}"\n'.format(geomParams["cenRad"]) +
            '.TopRadius "{}"\n'.format(geomParams["topRad"]) +
            '.BottomRadius "{}"\n'.format(geomParams["botRad"]) +
            '.Center "{}", "{}", "{}"\n'.format(geomParams["xCen"], geomParams["yCen"], geomParams["zCen"]) +
            '.Segments "{}"\n'.format(nSegments) +
            '.Create\n' +
            'End With'
            )

        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define sphere: " + name, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for creating the new sphere " +
                "was not successful. Check that the chosen material is defined" +
                " and that the specified name is not currently in use inside " +
                "the component where the sphere must be created. In addition," +
                " check also that cenRad is greater than topRad and botRad")
        return
    
    def addPolygonBlock(
        self, points: np.ndarray, height: Union[float, str], name: str,
        component: str, material: str, zMin: Union[float, str]=0.0):
        """Adds a block generated by the extrusion of a polygon to the 3D model.

        Parameters
        ----------
        points : np.ndarray of float
            Vertices of the polygon to be extruded.
        height : float or str
            Height for the extrusion process.
        name : str
            Name to give to the block.
        component : str
            Component where the block must be created.
        material : str
            Material to use for the block.
        zMin : float or str, optional
            Z plane at which the polygon will be defined, by default 0.0

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If component is not of type str.
        TypeError
            If material is not of type str.
        TypeError
            If points is not of type numpy array.
        TypeError
            If elements of points are not of type float.
        ValueError
            If points contains less than three vertices.
        ValueError
            If the number of coordinates of each point is different of 2.
        ValueError
            If the first and last points are not the same.
        TypeError
            If any of the geometric parameters (height, zMin) describing the
            block is not of type float or str.
        RuntimeError
            If any of the geometric parameters describing the block is of type
            str but it does not match any parameter already defined in the
            project.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check that component is of type str
        if not isinstance(component, str):
            raise TypeError("ERROR: component must be of type str.")
        
        # Check that material is of type str
        if not isinstance(material, str):
            raise TypeError("ERROR: material must be of type str.")
        
        # Check that points is of type numpy array
        if not isinstance(points, np.ndarray):
            raise TypeError("ERROR: points mut be of type np.ndarray.")
        
        # Check that the elements of points are of type float
        if points.dtype != float:
            raise TypeError("ERROR: Elements of points must be of type float.")
        
        nPoints = points.shape[0]
        coordsPerPoint = points.shape[1]
        # Check that points contains at least three points
        if nPoints < 3:
            raise ValueError("ERROR: At least three points must be specified." +
                             " Note that each row of the array corresponds to" +
                             " one point.")
        # Check that exactly two coordinates are specified for each point
        elif coordsPerPoint != 2:
            raise ValueError("ERROR: points must be specified in a " + 
                             "two-dimensional space. Therefore, the number of" +
                             " columns in points must be equal to two.")
        # Check that the first and last points are the same (the polygon must be
        # closed)    
        elif not all(points[0] == points[-1]):
            raise ValueError("ERROR: The first and last points must be the same.")
        
        ########################################################################
        # Pass all the parameters describing the geometric characteristics of
        # the sphere through the Parameter Checker to asses that they are of the
        # correct type and to cast them to str.
        ########################################################################
        
        # Group the values in a dictionary to simplify checking several
        # parameters
        geomParams = {"height": height, "zMin": zMin}
        
        # For each parameter
        for key, value in geomParams.items():
            # Pass is through the checker
            try:
                geomParams[key] = self.__CheckParam.doCheck(value)
            # If an exception occurs, handle it    
            except TypeError:
                raise TypeError(f"ERROR: {key} must be of type float or str.")
            except RuntimeError:
                raise RuntimeError(f"ERROR: {key} must make reference to a" + 
                                   "parameter already defined in the project")
                
        
                
        # Generate the VBA code 
        vba = (
            'With Extrude\n' +
            '.Reset\n' +
            '.Name "{}"\n'.format(name) +
            '.Component "{}"\n'.format(component) +
            '.Material "{}"\n'.format(material) +
            '.Mode "pointlist"\n' +
            '.Height "{}"\n'.format(geomParams["height"]) +
            '.Twist "0.0"\n' +
            '.Taper "0.0"\n' +
            '.Origin "0.0", "0.0", "{}"\n'.format(geomParams["zMin"]) +
            '.Uvector "1.0", "0.0", "0.0"\n' +
            '.Vvector "0.0", "1.0", "0.0"\n' +
            '.Point "{:f}", "{:f}"\n'.format(points[0][0], points[0][1])
            )

        # Add the resting points to the VBA code
        VBAaux = ''
        for ii in range(1, nPoints):
            VBAaux = VBAaux + '.LineTo "{:f}", "{:f}"\n'.format(points[ii][0], points [ii][1])
        vba = vba + VBAaux + '.create\nEnd With'


        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define brick: " + name, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for creating the new block " +
                "was not successful. Check that the chosen material is defined" +
                " and that the specified name is not currently in use inside " +
                "the component where the block must be created. In addition, " +
                "check also that cenRad is greater than topRad and botRad.")
        return

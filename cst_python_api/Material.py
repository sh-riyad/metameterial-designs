# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

from .CheckParam import CheckParam
class Material:
    """This class allows to manipulate the materials of the project
    """
    
    def __init__(self, MWS):
        """Initializes a new instance of Material.

        Parameters
        ----------
        MWS : COM object
            COM object referencing the project to control.
        """
        
        self.__MWS = MWS
        self.__CheckParam = CheckParam(MWS)
        return
    
    def addNormalMaterial(self, name, eps, mu, colour, tanD = 0.0, sigma = 0.0, tanDM = 0.0, sigmaM = 0.0):
        """Adds normal material to the project.
        
        The parameters defining electric characteristics of the material can be
        either of type float or str. If a float is received it will be directly
        used as the value for such parameter. In a string is received it will be
        verified that such string corresponds to a parameter already defined in
        the project. In an affirmative case, the string will be used in the
        material definition and the material will depend on this project
        parameter. However, if the received string does not correspond with a
        parameter already existing in the project an exception will be raised.
        
        The colour of the material is defined by a list representing the desired
        RGB colour code. Each colour component is indicated as a floating number
        between 0 and 1.

        Parameters
        ----------
        name : str
            Name to give to the material.
        eps : float or str
            Relative electric permittivity.
        mu : float or str
            Relative magnetic permeability.
        colour : list of float
            List representing the RGB colour for the material.
        tanD : float or str, optional
            Electric tangent loss, by default 0.0
        sigma : float or str, optional
            Electric conductivity, by default 0.0
        tanDM : float or str, optional
            Magnetic tangent loss, by default 0.0
        sigmaM : float or str, optional
            Magnetic conductivity, by default 0.0

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If any of the parameters describing the EM characteristics of the
            material is not of type float or str.
        RuntimeError
            If any of the parameters describing the EM characteristics of the
            material is of type string but it does not match any parameter
            already defined in the project.
        TypeError
            If colour is not of type list.
        ValueError
            If length of colour is different of 3.
        TypeError
            If any of the elements in colour is not of type float.
        RunTimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        ########################################################################
        # Pass all the parameters describing the EM characteristics of the
        # materials through the Parameter Checker to asses that they are of the
        # correct type and to cast them to str.
        ########################################################################
        
        # Group the values in a dictionary to simplify checking several parameters
        inputEMParams = {"eps": eps, "mu": mu, "tanD": tanD, "sigma": sigma,
                         "tanDM": tanDM, "sigmaM": sigmaM}
        
        # For each parameter
        for key, value in inputEMParams.items():
            # Pass is through the checker
            try:
                inputEMParams[key] = self.__CheckParam.doCheck(value)
            # If an exception occurs, handle it    
            except TypeError:
                raise TypeError(f"ERROR: {key} must be of type float or str.")
            except RuntimeError:
                raise RuntimeError(f"ERROR: {key} must make reference to a" + 
                                   "parameter already defined in the project")
            
        # Check that colour is of type list and has length 3
        if not isinstance(colour, list):
            raise TypeError("ERROR: colour must be of type list.")
        if len(colour) != 3:
            raise ValueError("ERROR: Length of colour must be equal to 3.")
        # Check that all components of colour are of type float
        colourTypeInt = all(isinstance(colourComp,float) for colourComp in colour)
        if not colourTypeInt:
            raise TypeError("ERROR: All elements of colour must be of type float.")
        
        
        # If a tanD value different of zero has been specified, then activate
        # the corresponding flag.
        if inputEMParams["tanD"] != "0.0":
            tanDGiven = "True"
        else:
            tanDGiven = "False"
        
        # If a tanDM value different of zero has been specified, then activate
        # the corresponding flag.
        if inputEMParams["tanDM"] != "0.0":
            tanDMGiven = "True"
        else:
            tanDMGiven = "False"
        
        # Generate the VBA code for creating the material    
        VBA = (
                'With Material\n' +
                '.Reset\n' +
                '.Name "{:s}"\n'.format(name) +
                '.Type "Normal"\n' +
                '.Epsilon "{:s}"\n'.format(inputEMParams["eps"]) + 
                '.Mue "{:s}"\n'.format(inputEMParams["mu"]) +
                '.TanD "{:s}"\n'.format(inputEMParams["tanD"]) +
                '.TanDFreq "0.0"\n' +
                '.TanDGiven "{:s}"\n'.format(tanDGiven) +
                '.TanDModel "ConstTanD"\n' +
                '.Sigma "{:s}"\n'.format(inputEMParams["sigma"]) +
                '.TanDM "{:s}"\n'.format(inputEMParams["tanDM"]) +
                '.TanDMFreq "0.0"\n' +
                '.TanDMGiven "{:s}"\n'.format(tanDMGiven) +
                '.TanDMModel "ConstTanD"\n' +
                '.SigmaM "{:s}"\n'.format(inputEMParams["sigmaM"]) +
                '.Colour "{:f}", "{:f}", "{:f}"\n'.format(colour[0], colour[1], colour[2]) +
                '.Create\n' +
                'End With'
        )
        
        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define material: " + name, VBA)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError("ERROR: Execution of the VBA code for creating" +
                               " the new material was not successful.")
        
        return
    
    def addAnisotropicMaterial(self, name, eps, mu, colour):
        """Adds normal material to the project.
        
        The parameters defining electric characteristics of the material (eps
        and mu) must be of type list with length equal to 3. Each element of the
        list represents one of the components (X, Y, Z) and it can be either of
        type float or str. If a float is received it will be directly used as
        the value for such parameter. In a string is received it will be
        verified that such string corresponds to a parameter already defined in
        the project. In an affirmative case, the string will be used in the
        material definition and the material will depend on this project
        parameter. However, if the received string does not correspond with a
        parameter already existing in the project an exception will be raised.
        
        The colour of the material is defined by a list representing the desired
        RGB colour code. Each colour component is indicated as a floating number
        between 0 and 1.

        Parameters
        ----------
        name : str
            Name to give to the material.
        eps : list of float or str
            Relative electric permittivity (X, Y and Z components).
        mu : list of float or str
            Relative magnetic permeability (X, Y and Z components).
        colour : list of float
            List representing the RGB colour for the material.

        Raises
        ------
        TypeError
            If name is not of type str.
        TypeError
            If eps is not of type list.
        ValueError
            If length of eps is different of 3.
        TypeError
            If mu is not of type list.
        ValueError
            If length of mu is different of 3.
        TypeError
            If any of the eps or mu components is not of type float or str.
        RuntimeError
            If any of the eps or mu components is of type string but it does not
            match any parameter already defined in the project.
        TypeError
            If colour is not of type list.
        ValueError
            If length of colour is different of 3.
        TypeError
            If any of the elements in colour is not of type float.
        RunTimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that name is of type str
        if not isinstance(name, str):
            raise TypeError("ERROR: name must be of type str.")
        
        # Check that eps is of type list and has length 3
        if not isinstance(eps, list):
            raise TypeError("ERROR: eps must be of type list.")
        if len(eps) != 3:
            raise ValueError("ERROR: Length of eps must be equal to 3.")
        
        # Check that mu is of type list and has length 3
        if not isinstance(mu, list):
            raise TypeError("ERROR: mu must be of type list.")
        if len(mu) != 3:
            raise ValueError("ERROR: Length of mu must be equal to 3.")
        
        ########################################################################
        # Pass all the parameters describing the EM characteristics of the
        # materials through the Parameter Checker to asses that they are of the
        # correct type and to cast them to str.
        ########################################################################
        
        # Group the values in a dictionary to simplify checking several parameters
        inputEMParams = {"epsX": eps[0], "epsY": eps[1], "epsZ": eps[2],
                         "muX": mu[0], "muY": mu[1], "muZ": mu[2]}
        
        # For each parameter
        for key, value in inputEMParams.items():
            # Pass is through the checker
            try:
                inputEMParams[key] = self.__CheckParam.doCheck(value)
            # If an exception occurs, handle it    
            except TypeError:
                raise TypeError(f"ERROR: {key} must be of type float or str.")
            except RuntimeError:
                raise RuntimeError(f"ERROR: {key} must make reference to a" + 
                                   "parameter already defined in the project")
            
        # Check that colour is of type list and has length 3
        if not isinstance(colour, list):
            raise TypeError("ERROR: colour must be of type list.")
        if len(colour) != 3:
            raise ValueError("ERROR: Length of colour must be equal to 3.")
        # Check that all components of colour are of type float
        colourTypeInt = all(isinstance(colourComp,float) for colourComp in colour)
        if not colourTypeInt:
            raise TypeError("ERROR: All elements of colour must be of type float.")
        
        # Generate the VBA code for creating the material    
        VBA = (
                'With Material\n' +
                '.Reset\n' +
                '.Name "{:s}"\n'.format(name) +
                '.Type "Anisotropic"\n' +
                '.EpsilonX "{:s}"\n'.format(inputEMParams["epsX"]) + 
                '.EpsilonY "{:s}"\n'.format(inputEMParams["epsY"]) + 
                '.EpsilonZ "{:s}"\n'.format(inputEMParams["epsZ"]) + 
                '.MueX "{:s}"\n'.format(inputEMParams["muX"]) +
                '.MueY "{:s}"\n'.format(inputEMParams["muY"]) +
                '.MueZ "{:s}"\n'.format(inputEMParams["muZ"]) +
                '.Colour "{:f}", "{:f}", "{:f}"\n'.format(colour[0], colour[1], colour[2]) +
                '.Create\n' +
                'End With'
        )
        
        # Send the VBA code to CST
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory("define material: " + name, VBA)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError("ERROR: Execution of the VBA code for creating" +
                               " the new material was not successful.")
        
        return
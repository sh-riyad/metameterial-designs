# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

class Boolean:
    """This class allows to perform boolean operations between objects of the
    project.
    """
    def __init__(self, MWS):
        """Initializes a new instance of Boolean.

        Parameters
        ----------
        MWS : COM object
            COM object referencing the project to control.
        """
        
        self.__MWS = MWS

        return
    
    def add(self, object1: str, object2: str):
        """Performs the boolean addition of two solids.
        
        object2 is added to object1, so the resulting solid will have the name
        of object1.
        
        For each of the solids their full name (including the name of the
        component where they belong) must be specified. A slash (/) must be used
        to separate nested components, and a colon (:) to separate the names of
        components and objects (e.g. "component1/sub-component1:solid1").

        Parameters
        ----------
        object1 : str
            Solid on which the addition will be performed.
        object2 : str
            Solid to add.

        Raises
        ------
        TypeError
            If object1 is not of type str.
        TypeError
            If object2 is not of type str.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that object1 is of type str
        if not isinstance(object1, str):
            raise TypeError("ERROR: object1 must be of type str.")
        
        # Check that object2 is of type str
        if not isinstance(object2, str):
            raise TypeError("ERROR: object2 must be of type str.")
        
        vba = 'Solid.Add "{}", "{}"'.format(object1, object2)
        
        # Send the VBA code to CST
        commandName = "boolean add shapes: {}, {}".format(object1, object2)
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory(commandName, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for adding {}".format(object1) +
                " and {} was not successful. Check that these ". format(object2) +
                "two objects already exist in the project.")
        
        return
    
    def subtract(self, object1: str, object2: str):
        """Performs the boolean subtraction between two solids.
        
        object2 is subtracted from object1, so the resulting solid will have the
        name of object1.
        
        For each of the solids their full name (including the name of the
        component where they belong) must be specified. A slash (/) must be used
        to separate nested components, and a colon (:) to separate the names of
        components and objects (e.g. "component1/sub-component1:solid1").

        Parameters
        ----------
        object1 : str
            Solid from which the subtraction will be performed.
        object2 : str
            Solid to subtract.

        Raises
        ------
        TypeError
            If object1 is not of type str.
        TypeError
            If object2 is not of type str.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that object1 is of type str
        if not isinstance(object1, str):
            raise TypeError("ERROR: object1 must be of type str.")
        
        # Check that object2 is of type str
        if not isinstance(object2, str):
            raise TypeError("ERROR: object2 must be of type str.")
        
        vba = 'Solid.Subtract "{}", "{}"'.format(object1, object2)
        
        # Send the VBA code to CST
        commandName = "boolean subtract shapes: {}, {}".format(object1, object2)
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory(commandName, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for subtracting {}".format(object2) +
                " from {} was not successful. Check that these ". format(object1) +
                "two objects already exist in the project.")
        
        return
    
    def intersect(self, object1: str, object2: str):
        """Performs the boolean intersection between two solids.
        
        object1 is considered as the main one, so the resulting solid will have
        the name of object1.
        
        For each of the solids their full name (including the name of the
        component where they belong) must be specified. A slash (/) must be used
        to separate nested components, and a colon (:) to separate the names of
        components and objects (e.g. "component1/sub-component1:solid1").

        Parameters
        ----------
        object1 : str
            Main solid for the intersection.
        object2 : str
            Secondary solid for the intersection.

        Raises
        ------
        TypeError
            If object1 is not of type str.
        TypeError
            If object2 is not of type str.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that object1 is of type str
        if not isinstance(object1, str):
            raise TypeError("ERROR: object1 must be of type str.")
        
        # Check that object2 is of type str
        if not isinstance(object2, str):
            raise TypeError("ERROR: object2 must be of type str.")
        
        vba = 'Solid.Intersect "{}", "{}"'.format(object1, object2)
        
        # Send the VBA code to CST
        commandName = "boolean intersect shapes: {}, {}".format(object1, object2)
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory(commandName, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for intersecting {}".format(object1) +
                " and {} was not successful. Check that these ". format(object2) +
                "two objects already exist in the project.")
        
        return
    
    def insert(self, object1: str, object2: str):
        """Performs the boolean insertion of one solid into another.
        
        object2 is inserted into object1.
        
        For each of the solids their full name (including the name of the
        component where they belong) must be specified. A slash (/) must be used
        to separate nested components, and a colon (:) to separate the names of
        components and objects (e.g. "component1/sub-component1:solid1").

        Parameters
        ----------
        object1 : str
            Solid where the insertion will occur.
        object2 : str
            Solid to insert.

        Raises
        ------
        TypeError
            If object1 is not of type str.
        TypeError
            If object2 is not of type str.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that object1 is of type str
        if not isinstance(object1, str):
            raise TypeError("ERROR: object1 must be of type str.")
        
        # Check that object2 is of type str
        if not isinstance(object2, str):
            raise TypeError("ERROR: object2 must be of type str.")
        
        vba = 'Solid.Insert "{}", "{}"'.format(object1, object2)
        
        # Send the VBA code to CST
        commandName = "boolean insert shapes: {}, {}".format(object1, object2)
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory(commandName, vba)
        
        # Raise an exception if the code is not executed successfully.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for inserting {}".format(object2) +
                " into {} was not successful. Check that these ". format(object1) +
                "two objects already exist in the project.")
        return
    
    def mergeCommonMaterials(self, component: str):
        """Performs the boolean addition of all solids of the same material at
        the specified component.
        
        In case of specifying a subcomponent, its name must be indicated using a
        slash (/) (e.g. "component1/sub-component1").

        Parameters
        ----------
        component : str
            Component for which the addition will be performed.

        Raises
        ------
        TypeError
            If component is not of type str.
        RuntimeError
            If the VBA code generated by this method is not successfully
            executed by CST.
        """
        
        # Check that component is of type str
        if not isinstance(component, str):
            raise TypeError("ERROR: component must be of type str.")
        
        vba = 'Solid.MergeMaterialsOfComponent "{}"'.format(component)
        
        # Send the VBA code to CST
        commandName = "merge common materials: {}".format(component)
        self.__MWS._FlagAsMethod("AddToHistory")
        result = self.__MWS.AddToHistory(commandName, vba)
        
        # Raise an exception if the code is not executed successfully.
        # It is uncertain when this would occur, since when provided with the
        # name of a non existing component CST will still return True.
        # Nevertheless, the generation of the exception is maintained just in
        # case.
        if result != True:
            raise RuntimeError(
                "ERROR: Execution of the VBA code for merging solids of the " +
                "same material in component {} was not ".format(component) +
                "successful.")
        
        return